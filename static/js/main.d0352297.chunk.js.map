{"version":3,"sources":["Components/ToDos.jsx","Components/AddToDo.jsx","Components/ResetToDos.jsx","Components/SearchToDos.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDos","todos","deleteTodo","todoList","length","map","todo","className","key","id","content","onClick","AddToDo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","placeholder","autoFocus","onChange","Component","ResetToDos","handleClick","resetTodos","SearchToDos","handleKeyUp","document","querySelector","term","trim","toLowerCase","Array","from","children","filter","textContent","includes","forEach","classList","add","remove","onKeyUp","App","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0352297.chunk.js","sourcesContent":["// responsible for listing individual todos in DOM\n\nimport React from 'react';\nimport '../styles/toDos.css';\n\nconst ToDos = ({ todos, deleteTodo }) => {\n\n    // using ternary operator to check if there's still todos or not anymore and handle both cases (true or false)\n    // incase thr ternary operator returned true: we map over all todos and output them individually\n    // incase the ternary operator returned false: we output a <p> \n    const todoList = todos.length ? (\n        todos.map(todo => {\n            return (<div className='todo' key={todo.id}>\n                    <span>{todo.content}</span>\n                    <span onClick={()=>{deleteTodo(todo.id)}}><b>X</b></span>\n                </div>)\n        })) : (<p>You have no todos</p>);\n\n    // outputting the todoList in DOM\n    return (\n        <div className='todoList'>\n            {todoList}\n        </div>\n    )\n\n}\n\nexport default ToDos;","// responsible for adding new todo\n\nimport React, { Component } from 'react';\nimport '../styles/addToDo.css';\nclass AddToDo extends Component {\n    \n    state = {\n        content: ''\n    }\n\n    // updating the state on change\n    handleChange = e => {\n        this.setState({\n            content: e.target.value\n        })\n    }\n\n    // using addTodo prop from the parent component App.js to grab the new todo which has been taken the input field\n    // then we clear the state.content and set the value in <input/> to state.content, in order to empty the input field after adding a new todo\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.addTodo(this.state);\n        this.setState({\n            content: ''\n        })\n    }\n\n    render() {\n        return(\n            <div className='addTodo'>\n                <form onSubmit={this.handleSubmit}>\n                    <input type=\"text\"\n                    value={this.state.content}\n                    placeholder='add new todo'\n                    autoFocus\n                    onChange={this.handleChange}/>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddToDo;","// responsible for clearing the todo list\n\nimport React, { Component } from 'react';\nimport '../styles/resetToDos.css';\n\nclass ResetToDos extends Component {\n    state = {\n        todos: ''\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        this.props.resetTodos(this.state.todos);\n    }\n\n    render() {\n        return(\n            <button className='resetBtn' onClick={this.handleClick} >Reset</button>\n        )\n    }\n}\n\nexport default ResetToDos;","// responsible for the search engine\n\nimport React, { Component } from 'react';\nimport '../styles/searchToDos.css';\n\nclass SearchToDos extends Component {\n\n    handleKeyUp = e => {\n        e.preventDefault();\n        \n        const todoList = document.querySelector('.todoList');\n        const term = e.target.value.trim().toLowerCase();\n\n        // adding classes to unmatched todos \n        Array.from(todoList.children)\n            .filter(todos => !todos.textContent.toLowerCase().includes(term))\n            .forEach(todos => todos.classList.add('filtered'));\n\n        // removing classes on delete    \n        Array.from(todoList.children)\n            .filter(todos => todos.textContent.toLowerCase().includes(term))\n            .forEach(todos => todos.classList.remove('filtered'));\n    }\n\n    render() {\n        return (\n            <form className='searchTodo'>\n                <input type=\"text\"\n                placeholder='search your todos'\n                onKeyUp={this.handleKeyUp} />\n            </form>\n        )\n    }\n}\n\nexport default SearchToDos;","import React, { Component } from 'react';\nimport './styles/app.css';\nimport ToDos from './Components/ToDos';\nimport AddToDo from './Components/AddToDo';\nimport ResetToDos from './Components/ResetToDos';\nimport SearchToDos from './Components/SearchToDos';\n\nclass App extends Component {\n  // setting the main state for the todos data\n  state = {\n    todos: [\n      {id: 1, content: 'reply to Shakira'},\n      {id: 2, content: 'visit Maldives'},\n      {id: 3, content: 'get th Ferrari from garage'},\n      {id: 4, content: 'dinner with Obama'}\n    ]\n  }\n\n  // filtering through the todos and returning all todos except the one with the id in param\n  // deleteTodo will be passed as a prop to the ToDos component\n  deleteTodo = (id) => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    })\n    this.setState({\n      todos\n    })\n  }\n\n  // grabbing the new todo from AddToDo component, giving it a new id, adding it to the todos array, then updating the state\n  // addTodo will be passed as a prop to the AddToDo component\n  addTodo = todo => {\n    todo.id = Math.random();\n    let todos = [...this.state.todos, todo];\n    this.setState({\n      todos\n    })\n  }\n\n  // resetting func to be used on the reset button on click \n  resetTodos = todoList => {\n    let todos = todoList;\n    this.setState({\n      todos\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Your ToDo List</h1>\n        <AddToDo addTodo={this.addTodo} />\n        <ToDos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <SearchToDos />\n        <ResetToDos resetTodos={this.resetTodos} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}